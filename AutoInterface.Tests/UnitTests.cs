using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;
using System.Reflection;
using Xunit;

namespace AutoInterface.Tests;

public sealed class UnitTests {
    private const string GENERATED_SOURCE_HEAD = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations
        
        
        using AutoInterfaceAttributes;
        """;

    private static string[] GenerateSourceText(string input, out Compilation outputCompilation, out ImmutableArray<Diagnostic> diagnostics) {
        AutoInterfaceGenerator generator = new();
        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);
        driver = driver.RunGeneratorsAndUpdateCompilation(CreateCompilation(input), out outputCompilation, out diagnostics);

        GeneratorDriverRunResult runResult = driver.GetRunResult();
        GeneratorRunResult generatorResult = runResult.Results[0];
        return generatorResult.GeneratedSources.Select((GeneratedSourceResult generatedSource) => generatedSource.SourceText.ToString()).ToArray();


        static Compilation CreateCompilation(string source) {
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(source);
            PortableExecutableReference metadataReference = MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location);
            CSharpCompilationOptions compilationOptions = new(OutputKind.ConsoleApplication);

            return CSharpCompilation.Create("compilation", new[] { syntaxTree }, new[] { metadataReference }, compilationOptions);
        }
    }


    [Fact]
    public void AssemblyNameAndVersionMatch() {
        string assemblyName = typeof(AutoInterfaceGenerator).Assembly.GetName().Name!;
        string assemblyVersion = typeof(AutoInterfaceGenerator).Assembly.GetName().Version!.ToString()[..^2];

        FieldInfo[] fields = typeof(Attributes).GetFields(BindingFlags.NonPublic | BindingFlags.Static);
        string name = (string)fields[0].GetValue(null)!;
        string version = (string)fields[1].GetValue(null)!;

        Assert.Equal(assemblyName, name);
        Assert.Equal(assemblyVersion, version);
    }
    

    #region Method

    [Fact]
    public void Member_Method() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int Test() => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int Test();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_Parameter() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int Test(int number, string str) => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int Test(int number, string str);
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_Summary() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public int Test() => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                int Test();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_SummaryWithAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                [Test]
                public int Test() => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                int Test();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_Async() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public async Task TestAsync() => Task.CompletedTask;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                Task TestAsync();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_FullName() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public global::System.Collections.Generic.List<int> NameTest() => new();
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                global::System.Collections.Generic.List<int> NameTest();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_Explicit() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                int ITest.ExplicitTest() => -1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int ExplicitTest();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_IgnoreAutoInterfaceAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                [IgnoreAutoInterface]
                public int NoTest() => 0;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Method_Everything() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public int Test() => 1;

                public async Task TestAsync() => Task.CompletedTask;

                public global::System.Collections.Generic.List<int> NameTest() => new();

                int ITest.ExplicitTest() => -1;

                [IgnoreAutoInterface]
                public int NoTest() => 0;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                int Test();

                Task TestAsync();

                global::System.Collections.Generic.List<int> NameTest();

                int ExplicitTest();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion


    #region Property

    [Fact]
    public void Member_Property() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int Test => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int Test { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_Summary() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public int Test => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                int Test { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_SummaryWithAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                [Test]
                public int Test => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                int Test { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_Get() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int TestGet { get; } = 2;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int TestGet { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_Set() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int TestSet { set; }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int TestSet { set; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_GetSet() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int TestGetSet { get; set; }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int TestGetSet { get; set; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_Init() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int TestInit { init; }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int TestInit { init; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_GetInit() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public int TestGetInit { get; init; }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int TestGetInit { get; init; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_FullName() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public global::System.Collections.Generic.List<int> NameTest => new();
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                global::System.Collections.Generic.List<int> NameTest { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_Explicit() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                int ITest.ExplicitTest => -1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int ExplicitTest { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_IgnoreAutoInterfaceAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                [IgnoreAutoInterface]
                public int NoTest => 0;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Property_Everything() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public int Test => 1;

                public int TestGet { get; } = 2;

                public int TestSet { set; }

                public int TestGetSet { get; set; }

                public int TestInit { init; }

                public int TestGetInit { get; init; }

                public global::System.Collections.Generic.List<int> NameTest => new();

                int ITest.ExplicitTest => -1;

                [IgnoreAutoInterface]
                public int NoTest => 0;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                int Test { get; }

                int TestGet { get; }

                int TestSet { set; }

                int TestGetSet { get; set; }

                int TestInit { init; }

                int TestGetInit { get; init; }

                global::System.Collections.Generic.List<int> NameTest { get; }

                int ExplicitTest { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion


    #region Indexer

    [Fact]
    public void Member_Indexer() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class TestGet {
                public int this[int i] {
                  get => i;
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITestGet {
                int this[int i] { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
        
    }

    [Fact]
    public void Member_Indexer_Summary() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class TestGet {
                /// <summary>
                /// my description
                /// </summary>
                public int this[int i] {
                  get => i;
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITestGet {
                /// <summary>
                /// my description
                /// </summary>
                int this[int i] { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Indexer_SummaryWithAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class TestGet {
                /// <summary>
                /// my description
                /// </summary>
                [Test]
                public int this[int i] {
                  get => i;
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITestGet {
                /// <summary>
                /// my description
                /// </summary>
                int this[int i] { get; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Indexer_Get() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class TestGet {
                public int this[int i] {
                  get { return i; }
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITestGet {
                int this[int i] { get; }
            }

            """;
        Assert.Equal(expected, sourceText);

    }

    [Fact]
    public void Member_Indexer_Set() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;

            [AutoInterface]
            public class TestSet {
                public int this[int i] {
                  set { }
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITestSet {
                int this[int i] { set; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Indexer_GetSet() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;

            [AutoInterface]
            public class TestGetSet {
                public int this[int i] {
                  get => i;
                  set { }
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITestGetSet {
                int this[int i] { get; set; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Indexer_Explicit() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class TestExplicit {
                int ITestExplicit.this[int i] {
                  get => i
                  set { }
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITestExplicit {
                int this[int i] { get; set; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Indexer_IgnoreAutoInterfaceAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class NoTest {
                [IgnoreAutoInterface]
                public int this[int i] {
                  get { return i; }
                  set { }
               }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface INoTest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_Indexer_Everything() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class TestGet {
                /// <summary>
                /// my description
                /// </summary>
                public int this[int i] {
                  get { return i; }
               }
            }

            [AutoInterface]
            public class TestSet {
                public int this[int i] {
                  set { }
               }
            }

            [AutoInterface]
            public class TestGetSet {
                public int this[int i] {
                  get { return i; }
                  set { }
               }
            }

            [AutoInterface]
            public class TestExplicit {
                int ITestExplicit.this[int i] {
                  get { return i; }
                  set { }
               }
            }

            [AutoInterface]
            public class NoTest {
                [IgnoreAutoInterface]
                public int this[int i] {
                  get { return i; }
                  set { }
               }
            }

            """;
        string[] sourceText = GenerateSourceText(input, out _, out _);
        sourceText = sourceText.Skip(sourceText.Length - 5).Take(5).ToArray();

        {
            const string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITestGet {
                    /// <summary>
                    /// my description
                    /// </summary>
                    int this[int i] { get; }
                }

                """;
            Assert.Equal(expected, sourceText[0]);
        }
        {
            const string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITestSet {
                    int this[int i] { set; }
                }

                """;
            Assert.Equal(expected, sourceText[1]);
        }
        {
            const string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITestGetSet {
                    int this[int i] { get; set; }
                }

                """;
            Assert.Equal(expected, sourceText[2]);
        }
        {
            const string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITestExplicit {
                    int this[int i] { get; set; }
                }

                """;
            Assert.Equal(expected, sourceText[3]);
        }
        {
            const string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface INoTest {}

                """;
            Assert.Equal(expected, sourceText[4]);
        }
    }

    #endregion


    #region EventField

    [Fact]
    public void Member_EventField() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public event Action Test;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                event Action Test;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventField_Summary() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public event Action Test;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                event Action Test;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventField_SummaryWithAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                [Test]
                public event Action Test;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                event Action Test;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventField_IgnoreAutoInterfaceAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                [IgnoreAutoInterface]
                public event Action NoTest;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventField_Everything() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public event Action Test;

                [IgnoreAutoInterface]
                public event Action NoTest;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                event Action Test;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion


    #region EventProperty

    [Fact]
    public void Member_EventProperty() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                public event Action Test { add { } remove { } }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                event Action Test;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventProperty_Summary() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public event Action Test { add { } remove { } }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                event Action Test;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventProperty_SummaryWithAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                [Test]
                public event Action Test { add { } remove { } }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                event Action Test;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventProperty_Explicit() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                event Action ITest.ExplicitTest { add { } remove { } }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                event Action ExplicitTest;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventProperty_IgnoreAutoInterfaceAttribute() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                [IgnoreAutoInterface]
                public event Action NoTest { add { } remove { } }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Member_EventProperty_Everything() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                public event Action Test { add { } remove { } }

                event Action ITest.ExplicitTest { add { } remove { } }

                [IgnoreAutoInterface]
                public event Action NoTest { add { } remove { } }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                event Action Test;

                event Action ExplicitTest;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion



    #region namespace and usings

    [Fact]
    public void NestedNamespace() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode {
                namespace Nested {
                    [AutoInterface]
                    public class Test {
                        public void SomeMethod() { }
                    }
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode.Nested;

            public interface ITest {
                void SomeMethod();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void NestedUsings() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode {
                using A;
                namespace Nested {
                    using nested.A;

                    [AutoInterface]
                    public class Test {
                        public void SomeMethod() { }
                    }
                }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable annotations


            using nested.A;
            using A;
            using AutoInterfaceAttributes;

            namespace MyCode.Nested;

            public interface ITest {
                void SomeMethod();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion


    #region Attributes

    [Theory]
    [InlineData("Example")]
    [InlineData("asdf")]
    [InlineData("TestInterface")]
    [InlineData("WUWU")]
    public void Attribute_Name(string name) {
        string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(Name = "{{name}}")]
            public class Test { }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface {{name}} {}

            """;
        Assert.Equal(expected, sourceText);
    }


    [Theory]
    [InlineData("internal")]
    [InlineData("public partial")]
    [InlineData("internal partial")]
    public void Attribute_Modifier(string modifier) {
        string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(Modifier = "{{modifier}}")]
            public class Test { }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            {{modifier}} interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }
    

    [Theory]
    [InlineData("MySpace")]
    [InlineData("System.Generics")]
    [InlineData("BLAHBLAH.BLAH")]
    public void Attribute_Namespace(string namspace) {
        string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(Namespace = "{{namspace}}")]
            public class Test { }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace {{namspace}};

            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Attribute_EmptyNamespace() {
        string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(Namespace = "")]
            public class Test { }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }


    [Theory]
    [InlineData("new Type[] { }", "")]
    [InlineData("new[] { typeof(ICore) }", ": ICore ")]
    [InlineData("new Type[] { typeof(ICore) }", ": ICore ")]
    [InlineData("new[] { typeof(A), typeof(B), typeof(C) }", ": A, B, C ")]
    [InlineData("new Type[] { typeof(A), typeof(B), typeof(C) }", ": A, B, C ")]
    public void Attribute_Inheritance(string inheritance, string result) {
        string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(Inheritance = {{inheritance}})]
            public class Test { }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {{result}}{}

            """;
        Assert.Equal(expected, sourceText);
    }


    [Fact]
    public void Attribute_StaticMembers() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(StaticMembers = true)]
            public class Test {
                public static int GetNumber() => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                static abstract int GetNumber();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion


    #region summary

    [Fact]
    public void Summary() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            /// <summary>
            /// my description
            /// </summary>
            [AutoInterface]
            public class Test { }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            /// <summary>
            /// my description
            /// </summary>
            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Summary_Method() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                /// <summary>
                /// my description
                /// </summary>
                /// <param name="parameter1"></param>
                /// <param name="parameter2"></param>
                /// <returns></returns>
                /// <remarks></remarks>
                /// <exception cref=""></exception>
                public int SomeMethod(int parameter1, string parameter2) => 1;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                /// <summary>
                /// my description
                /// </summary>
                /// <param name="parameter1"></param>
                /// <param name="parameter2"></param>
                /// <returns></returns>
                /// <remarks></remarks>
                /// <exception cref=""></exception>
                int SomeMethod(int parameter1, string parameter2);
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Summary_PreProcessorDirective() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                #region
                public void SomeMethod() { }
                #endregion

                #region
                public int SomeProperty { get; init; }
                #endregion
                
                #region
                public int this[int i] => i;
                #endregion
                
                #region
                public event Action? someEvent;
                #endregion
                
                #region
                public event Action SomeEvent { add { } remove { } }
                #endregion
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                void SomeMethod();

                int SomeProperty { get; init; }

                int this[int i] { get; }

                event Action? someEvent;

                event Action SomeEvent;
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion


    #region multiple

    [Fact]
    public void TwoAutoInterfaceAttributes() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(Name = "ITest1")]
            [AutoInterface(Name = "ITest2")]
            public class Test {
                public int GetNumber() => 1;
            }

            """;
        string[] sourceText = GenerateSourceText(input, out _, out _);
        sourceText = sourceText.Skip(sourceText.Length - 2).Take(2).ToArray();

        {
            string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITest1 {
                    int GetNumber();
                }

                """;
            Assert.Equal(expected, sourceText[0]);
        }
        {
            string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITest2 {
                    int GetNumber();
                }

                """;
            Assert.Equal(expected, sourceText[1]);
        }
    }

    [Fact]
    public void TwoAutoInterfaceAttributes_Summary() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            
            /// <summary>
            /// my description
            /// </summary>
            [AutoInterface(Name = "ITest1")]
            [AutoInterface(Name = "ITest2")]
            public class Test {
                public int GetNumber() => 1;
            }

            """;
        string[] sourceText = GenerateSourceText(input, out _, out _);
        sourceText = sourceText.Skip(sourceText.Length - 2).Take(2).ToArray();

        {
            string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;
                
                /// <summary>
                /// my description
                /// </summary>
                public interface ITest1 {
                    int GetNumber();
                }

                """;
            Assert.Equal(expected, sourceText[0]);
        }
        {
            string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;
                
                /// <summary>
                /// my description
                /// </summary>
                public interface ITest2 {
                    int GetNumber();
                }

                """;
            Assert.Equal(expected, sourceText[1]);
        }
    }

    [Fact]
    public void TwoAutoInterfaceAttributes_Explicit() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface(Name = "ITest1")]
            [AutoInterface(Name = "ITest2")]
            public class Test {
                int ITest1.GetNumber() => 1;

                string ITest2.GetString() => "";
            }

            """;
        string[] sourceText = GenerateSourceText(input, out _, out _);
        sourceText = sourceText.Skip(sourceText.Length - 2).Take(2).ToArray();

        {
            string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITest1 {
                    int GetNumber();
                }

                """;
            Assert.Equal(expected, sourceText[0]);
        }
        {
            string expected = $$"""
                {{GENERATED_SOURCE_HEAD}}

                namespace MyCode;

                public interface ITest2 {
                    string GetString();
                }

                """;
            Assert.Equal(expected, sourceText[1]);
        }
    }


    #endregion



    #region miscellaneous

    [Fact]
    public void Empty() {
        const string input = """
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test { }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        const string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {}

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void Generic() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test<T> {
                public T? Test() => default;
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest<T> {
                T? Test();
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    [Fact]
    public void NotInterface() {
        const string input = $$"""
            using AutoInterfaceAttributes;
            
            namespace MyCode;
            
            [AutoInterface]
            public class Test {
                internal void SomeMethod() { }

                private int Prop => 1;

                internal int AccessorProp { get; private set; }

                public int OneProp { private get; set; }

                public static void StaticMethod() { }
            }

            """;
        string sourceText = GenerateSourceText(input, out _, out _).Last();

        string expected = $$"""
            {{GENERATED_SOURCE_HEAD}}

            namespace MyCode;

            public interface ITest {
                int OneProp { set; }
            }

            """;
        Assert.Equal(expected, sourceText);
    }

    #endregion
}
