using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;
using System.Reflection;

namespace AutoInterface.Tests;

public static class Shared {
    public const string GENERATED_SOURCE_HEAD = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable annotations
        
        
        using AutoInterfaceAttributes;
        """;

    public static string[] GenerateSourceText(this string input, out Compilation outputCompilation, out ImmutableArray<Diagnostic> diagnostics) {
        AutoInterfaceGenerator generator = new();
        GeneratorDriver driver = CSharpGeneratorDriver.Create(generator);
        driver = driver.RunGeneratorsAndUpdateCompilation(CreateCompilation(input), out outputCompilation, out diagnostics);

        GeneratorDriverRunResult runResult = driver.GetRunResult();
        GeneratorRunResult generatorResult = runResult.Results[0];
        return generatorResult.GeneratedSources.Select((GeneratedSourceResult generatedSource) => generatedSource.SourceText.ToString()).ToArray();


        static CSharpCompilation CreateCompilation(string source) {
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(source);
            PortableExecutableReference metadataReference = MetadataReference.CreateFromFile(typeof(Binder).GetTypeInfo().Assembly.Location);
            CSharpCompilationOptions compilationOptions = new(OutputKind.ConsoleApplication);

            return CSharpCompilation.Create("compilation", [syntaxTree], [metadataReference], compilationOptions);
        }
    }
}
