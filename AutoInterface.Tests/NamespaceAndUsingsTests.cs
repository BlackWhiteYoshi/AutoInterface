namespace AutoInterface.Tests;

public sealed class NamespaceAndUsingsTests {
    [Test]
    public async ValueTask NestedNamespace() {
        const string input = $$"""
            using AutoInterfaceAttributes;

            namespace MyCode {
                namespace Nested {
                    [AutoInterface]
                    public class Test {
                        public void SomeMethod() { }
                    }
                }
            }

            """;
        string sourceText = input.GenerateSourceText(out _, out _)[^1];

        string expected = $$"""
            {{Shared.GENERATED_SOURCE_HEAD}}

            namespace MyCode.Nested;

            public partial interface ITest {
                void SomeMethod();
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }

    [Test]
    public async ValueTask NestedUsings() {
        const string input = $$"""
            using AutoInterfaceAttributes;

            namespace MyCode {
                using A;
                namespace Nested {
                    using nested.A;

                    [AutoInterface]
                    public class Test {
                        public void SomeMethod() { }
                    }
                }
            }

            """;
        string sourceText = input.GenerateSourceText(out _, out _)[^1];

        string expected = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable annotations


            using nested.A;
            using A;
            using AutoInterfaceAttributes;

            namespace MyCode.Nested;

            public partial interface ITest {
                void SomeMethod();
            }

            """;
        await Assert.That(sourceText).IsEqualTo(expected);
    }
}
